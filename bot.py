import os
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MenuButtonCommands, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.error import BadRequest
from dotenv import load_dotenv
import logging
import asyncio
import re
import requests
from bs4 import BeautifulSoup
import tempfile
import time
from functools import wraps
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

def rate_limit(limit_seconds=2):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π"""
    def decorator(func):
        last_called = {}
        
        @wraps(func)
        async def wrapper(self, update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
            if hasattr(update, 'effective_user'):
                user_id = update.effective_user.id
            elif hasattr(update, 'from_user'):  # –î–ª—è CallbackQuery
                user_id = update.from_user.id
            elif hasattr(update, 'message') and update.message:
                user_id = update.message.from_user.id
            else:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                return await func(self, update, context, *args, **kwargs)
                
            current_time = time.time()
            
            if user_id in last_called:
                time_passed = current_time - last_called[user_id]
                if time_passed < limit_seconds:
                    try:
                        if hasattr(update, 'callback_query'):
                            await update.callback_query.answer(
                                f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {limit_seconds - int(time_passed)} —Å–µ–∫—É–Ω–¥", 
                                show_alert=False
                            )
                        else:
                            await update.message.reply_text(
                                f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {limit_seconds - int(time_passed)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º"
                            )
                    except:
                        pass
                    return
            
            last_called[user_id] = current_time
            return await func(self, update, context, *args, **kwargs)
        
        return wrapper
    return decorator

class ScheduleBot:
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        self.excel_file = os.getenv('EXCEL_FILE_PATH')
        self.user_data = {}
        self.week_info_cache = None
        self.df_cache = None
        self.last_download_time = None
        self.data_loaded = False
        self.last_action_time = {}
        
    def download_schedule_from_website(self):
        """–°–∫–∞—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞ ktmu-sutd.ru"""
        try:
            logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
            
            timetable_url = "https://ktmu-sutd.ru/timetable.html"
            
            session = requests.Session()
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
            session.trust_env = False
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response = session.get(timetable_url, headers=headers, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫
            schedule_links = []
            for link in soup.find_all('a', href=True):
                href = link['href']
                text = link.get_text(strip=True)
                
                if href.startswith('/'):
                    full_url = f"https://ktmu-sutd.ru{href}"
                elif href.startswith('http'):
                    full_url = href
                else:
                    continue
                
                url_lower = full_url.lower()
                
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
                if any(ext in url_lower for ext in ['.xlsx', '.xls']):
                    schedule_links.append((full_url, text, "EXCEL"))
                elif any(domain in url_lower for domain in ['docs.google.com', 'drive.google.com']):
                    schedule_links.append((full_url, text, "GOOGLE_DOCS"))
            
            if not schedule_links:
                return self.download_schedule_alternative()
            
            # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã
            for file_url, file_name, file_type in schedule_links[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                try:
                    download_url = file_url
                    if file_type == "GOOGLE_DOCS":
                        excel_url = self.convert_google_docs_to_excel(file_url)
                        if excel_url:
                            download_url = excel_url
                        else:
                            continue
                    
                    file_response = session.get(download_url, headers=headers, timeout=30)
                    
                    if file_response.status_code == 200 and len(file_response.content) > 10000:
                        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
                            tmp_file.write(file_response.content)
                            temp_excel_file = tmp_file.name
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
                        try:
                            excel_file = pd.ExcelFile(temp_excel_file)
                            sheet_names = excel_file.sheet_names
                            
                            if any(any(keyword in sheet.lower() for keyword in ['1 –ø–æ—Ç–æ–∫', '1_–ø–æ—Ç–æ–∫', 'kr', '–∫—Ä–¥']) 
                                  for sheet in sheet_names):
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –ª–∏—Å—Ç–æ–º 1 –ø–æ—Ç–æ–∫–∞")
                                self.excel_file = temp_excel_file
                                self.df_cache = None
                                self.week_info_cache = None
                                self.data_loaded = True
                                return True
                            else:
                                os.unlink(temp_excel_file)
                                continue
                                
                        except Exception:
                            try:
                                os.unlink(temp_excel_file)
                            except:
                                pass
                            continue
                            
                except Exception:
                    continue
            
            return self.download_schedule_alternative()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return self.download_schedule_alternative()

    def convert_google_docs_to_excel(self, google_docs_url):
        """–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Google Docs —Å—Å—ã–ª–∫–∏"""
        try:
            google_docs_url = google_docs_url.replace('gooogle', 'google')
            
            if '/spreadsheets/d/' in google_docs_url:
                match = re.search(r'/spreadsheets/d/([a-zA-Z0-9-_]+)', google_docs_url)
                if match:
                    return f"https://docs.google.com/spreadsheets/d/{match.group(1)}/export?format=xlsx"
            
            elif '/file/d/' in google_docs_url or 'drive.google.com' in google_docs_url:
                patterns = [r'/file/d/([a-zA-Z0-9-_]+)', r'id=([a-zA-Z0-9-_]+)', r'/d/([a-zA-Z0-9-_]+)']
                for pattern in patterns:
                    match = re.search(pattern, google_docs_url)
                    if match:
                        return f"https://drive.google.com/uc?export=download&id={match.group(1)}"
            
            return None
        except:
            return None

    def download_schedule_alternative(self):
        """–ë—ã—Å—Ç—Ä–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞"""
        try:
            known_links = [
                "https://docs.google.com/spreadsheets/d/1zyuQ2Z1tXrTh3mU3JX4bZMonwsQFruf3/export?format=xlsx",
            ]
            
            session = requests.Session()
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏ –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            session.trust_env = False
            
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
            
            for link in known_links:
                try:
                    response = session.get(link, headers=headers, timeout=15)
                    if response.status_code == 200:
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
                            tmp_file.write(response.content)
                            self.excel_file = tmp_file.name
                        
                        self.df_cache = None
                        self.week_info_cache = None
                        self.data_loaded = True
                        return True
                except:
                    continue
            
            return False
        except:
            return False

    def get_dataframe(self, force_download=False):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DataFrame"""
        try:
            if force_download or not self.data_loaded:
                logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
                success = self.download_schedule_from_website()
                if not success:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if self.excel_file and os.path.exists(self.excel_file):
                        logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª...")
                        try:
                            excel_file = pd.ExcelFile(self.excel_file)
                            sheet_names = excel_file.sheet_names
                            
                            target_sheet = None
                            for sheet in sheet_names:
                                if any(keyword in sheet.lower() for keyword in ['1 –ø–æ—Ç–æ–∫', '1_–ø–æ—Ç–æ–∫', 'kr', '–∫—Ä–¥']):
                                    target_sheet = sheet
                                    break
                            
                            if not target_sheet and sheet_names:
                                target_sheet = sheet_names[0]
                            
                            if target_sheet:
                                self.df_cache = pd.read_excel(self.excel_file, sheet_name=target_sheet, header=None)
                                self.data_loaded = True
                                logger.info(f"‚úÖ DataFrame –∑–∞–≥—Ä—É–∂–µ–Ω —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {target_sheet}")
                                return self.df_cache
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                    return None
            
            if self.df_cache is None and self.excel_file and os.path.exists(self.excel_file):
                # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ª–∏—Å—Ç–∞
                excel_file = pd.ExcelFile(self.excel_file)
                sheet_names = excel_file.sheet_names
                
                target_sheet = None
                for sheet in sheet_names:
                    if any(keyword in sheet.lower() for keyword in ['1 –ø–æ—Ç–æ–∫', '1_–ø–æ—Ç–æ–∫', 'kr', '–∫—Ä–¥']):
                        target_sheet = sheet
                        break
                
                if not target_sheet and sheet_names:
                    target_sheet = sheet_names[0]
                
                if target_sheet:
                    self.df_cache = pd.read_excel(self.excel_file, sheet_name=target_sheet, header=None)
                    logger.info(f"‚úÖ DataFrame –∑–∞–≥—Ä—É–∂–µ–Ω —Å –ª–∏—Å—Ç–∞: {target_sheet}")
            
            return self.df_cache
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DataFrame: {e}")
            return None

    def is_data_loaded(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ"""
        return self.data_loaded and self.df_cache is not None

    def get_current_academic_week(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            week_info = self.get_week_info()
            if not week_info:
                return "1"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            today = pd.Timestamp.now().normalize()
            
            # –ò—â–µ–º –Ω–µ–¥–µ–ª—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            for week_num, info in week_info.items():
                week_desc = info.get('description', '').lower()
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏
                dates = re.findall(r'\d{1,2}\.\d{1,2}\.\d{4}', week_desc)
                if len(dates) >= 2:
                    try:
                        start_date = pd.to_datetime(dates[0], format='%d.%m.%Y')
                        end_date = pd.to_datetime(dates[1], format='%d.%m.%Y')
                        
                        if start_date <= today <= end_date:
                            return week_num
                    except:
                        continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é
            return sorted(week_info.keys())[0]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–µ–±–Ω–æ–π –Ω–µ–¥–µ–ª–∏: {e}")
            return "1"

    def get_monday_date(self, week_number):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏"""
        try:
            df = self.get_dataframe()
            if df is None:
                return None
            
            week_info = self.get_week_info()
            if not week_info or week_number not in week_info:
                return None
            
            week_data = week_info[week_number]
            monday_col = week_data['columns'][0]  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            
            # –ò—â–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫–µ 4 (–∏–Ω–¥–µ–∫—Å 3) –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
            date_cell = df.iloc[3, monday_col]
            if pd.notna(date_cell):
                date_str = str(date_cell).strip()
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É
                date_match = re.search(r'\d{1,2}\.\d{1,2}\.\d{4}', date_str)
                if date_match:
                    try:
                        return datetime.strptime(date_match.group(0), '%d.%m.%Y')
                    except:
                        pass
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–∞—Ç—É –≤ —è—á–µ–π–∫–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏
            week_desc = week_data.get('description', '')
            dates = re.findall(r'\d{1,2}\.\d{1,2}\.\d{4}', week_desc)
            if dates:
                try:
                    return datetime.strptime(dates[0], '%d.%m.%Y')
                except:
                    pass
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞: {e}")
            return None

    def get_day_date(self, week_number, day_index):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
            monday_date = self.get_monday_date(week_number)
            if not monday_date:
                return ""
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è (–¥–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É)
            target_date = monday_date + timedelta(days=day_index)
            return target_date.strftime('%d.%m.%Y')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –¥–Ω—è: {e}")
            return ""

    def get_current_week_and_day(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –∏ –¥–µ–Ω—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        week_number = self.get_current_academic_week()
        
        # –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        current_day = pd.Timestamp.now().dayofweek
        if current_day >= 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            current_day = 0   # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            # –ï—Å–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
            week_info = self.get_week_info()
            if week_info:
                weeks = sorted(week_info.keys(), key=int)
                current_index = weeks.index(week_number)
                if current_index < len(weeks) - 1:
                    week_number = weeks[current_index + 1]
        
        return week_number, current_day

    def get_week_info(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–¥–µ–ª—è—Ö"""
        if self.week_info_cache is not None:
            return self.week_info_cache
            
        try:
            df = self.get_dataframe()
            if df is None or len(df.columns) == 0:
                return {}
            
            week_info = {}
            # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–µ–ª—å –≤ —Å—Ç—Ä–æ–∫–µ 4
            for col in range(min(50, len(df.columns))):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
                cell_value = df.iloc[3, col]
                if pd.notna(cell_value) and '–Ω–µ–¥–µ–ª—è' in str(cell_value).lower():
                    week_text = str(cell_value)
                    week_num, week_type, date_range = self._parse_week_info(week_text)
                    
                    if week_num:
                        week_columns = self._find_week_columns_simple(col, week_num)
                        week_info[week_num] = {
                            'type': week_type,
                            'description': week_text,
                            'date_range': date_range,
                            'columns': week_columns,
                            'header_column': col
                        }
            
            self.week_info_cache = week_info
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(week_info)} –Ω–µ–¥–µ–ª—è—Ö")
            return week_info
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–¥–µ–ª—è—Ö: {e}")
            return {}

    def _parse_week_info(self, week_text):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–¥–µ–ª–µ —Å –¥–∞—Ç–∞–º–∏"""
        week_text_lower = week_text.lower()
        
        week_type = '–ù–µ—á–µ—Ç–Ω–∞—è' if '–Ω–µ—á–µ—Ç–Ω–∞—è' in week_text_lower or '—á–∏—Å–ª–∏—Ç–µ–ª—å' in week_text_lower else \
                   '–ß–µ—Ç–Ω–∞—è' if '—á–µ—Ç–Ω–∞—è' in week_text_lower or '–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å' in week_text_lower else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        # –ò—â–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
        bracket_match = re.search(r'\((\d+)\)', week_text)
        if bracket_match:
            week_num = bracket_match.group(1)
        else:
            numbers = re.findall(r'\d+', week_text)
            week_num = numbers[0] if numbers else None
        
        # –ò—â–µ–º –¥–∞—Ç—ã
        dates = re.findall(r'\d{1,2}\.\d{1,2}\.\d{4}', week_text)
        date_range = ""
        if len(dates) >= 2:
            date_range = f"{dates[0]} - {dates[1]}"
        
        return week_num, week_type, date_range

    def _find_week_columns_simple(self, header_col, week_number):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ–¥–µ–ª–∏"""
        try:
            df = self.get_dataframe()
            if df is None:
                return []
            
            return [header_col + i for i in range(6) if header_col + i < len(df.columns)]
        except:
            return []

    async def safe_edit_message(self, query, text, reply_markup=None, parse_mode='HTML'):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            return True
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

    async def setup_commands(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        commands = [
            BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("menu", "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("refresh", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
            BotCommand("week", "üìÖ –í—ã–±—Ä–∞—Ç—å –Ω–µ–¥–µ–ª—é"),
            BotCommand("today", "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
            BotCommand("tomorrow", "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
            BotCommand("monday", "üìÜ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
            BotCommand("tuesday", "üìÜ –í—Ç–æ—Ä–Ω–∏–∫"),
            BotCommand("wednesday", "üìÜ –°—Ä–µ–¥–∞"),
            BotCommand("thursday", "üìÜ –ß–µ—Ç–≤–µ—Ä–≥"),
            BotCommand("friday", "üìÜ –ü—è—Ç–Ω–∏—Ü–∞"),
            BotCommand("saturday", "üìÜ –°—É–±–±–æ—Ç–∞"),
            BotCommand("debug", "üêõ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
        ]
        
        await application.bot.set_my_commands(commands)
        await application.bot.set_chat_menu_button(menu_button=MenuButtonCommands())

    @rate_limit(limit_seconds=2)
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        loading_message = await update.message.reply_text(
            "üîÑ <b>–ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...</b>\n"
            "<i>–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>", 
            parse_mode='HTML'
        )
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        success = await asyncio.get_event_loop().run_in_executor(None, self.download_schedule_from_website)
        
        if success:
            await loading_message.edit_text(
                "‚úÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.",
                parse_mode='HTML'
            )
            await asyncio.sleep(1)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            await self.show_main_menu(update, context)
        else:
            await loading_message.edit_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n"
                "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )
            await asyncio.sleep(1)
            await self.show_main_menu(update, context)

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –Ω–µ–¥–µ–ª—é", callback_data="select_week")],
            [InlineKeyboardButton("üìÜ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –¥–Ω—è–º", callback_data="quick_days")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="refresh_schedule")],
            [InlineKeyboardButton("üêõ –û—Ç–ª–∞–¥–∫–∞", callback_data="debug_weeks")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        status = "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ" if self.data_loaded else "‚ö†Ô∏è –°—Ç–∞—Ä–æ–µ"
        
        text = message_text or (
            f"üëã <b>–ë–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è 1-–ö–†–î-6</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö:</b> {status}\n\n"
            "üöÄ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /refresh - –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ /week - –í—ã–±—Ä–∞—Ç—å –Ω–µ–¥–µ–ª—é\n"
            "‚Ä¢ /today - –°–µ–≥–æ–¥–Ω—è\n‚Ä¢ /tomorrow - –ó–∞–≤—Ç—Ä–∞\n"
            "‚Ä¢ /monday - –ü–Ω\n‚Ä¢ /tuesday - –í—Ç\n‚Ä¢ /wednesday - –°—Ä\n"
            "‚Ä¢ /thursday - –ß—Ç\n‚Ä¢ /friday - –ü—Ç\n‚Ä¢ /saturday - –°–±\n\n"
            "üëá <i>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:</i>"
        )
        
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    @rate_limit(limit_seconds=2)
    async def menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /menu"""
        await self.show_main_menu(update, context)

    @rate_limit(limit_seconds=3)
    async def refresh(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /refresh"""
        message = await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
        
        success = await asyncio.get_event_loop().run_in_executor(None, self.download_schedule_from_website)
        
        if success:
            await message.edit_text("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await asyncio.sleep(1)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await self.show_main_menu(update, context)
        else:
            await message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")

    @rate_limit(limit_seconds=2)
    async def week(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /week"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if not self.is_data_loaded():
            await update.message.reply_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /refresh",
                parse_mode='HTML'
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏
        await self.show_week_selection_standalone(update, context)

    @rate_limit(limit_seconds=2)
    async def today(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /today - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        if not self.is_data_loaded():
            await update.message.reply_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /refresh",
                parse_mode='HTML'
            )
            return
        
        week_number, day_idx = self.get_current_week_and_day()
        await self.show_day_schedule_standalone(update, week_number, day_idx, "—Å–µ–≥–æ–¥–Ω—è")

    @rate_limit(limit_seconds=2)
    async def tomorrow(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
        if not self.is_data_loaded():
            await update.message.reply_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /refresh",
                parse_mode='HTML'
            )
            return
        
        week_number, current_day = self.get_current_week_and_day()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –¥–ª—è –∑–∞–≤—Ç—Ä–∞
        tomorrow_idx = current_day + 1
        week_change = False
        
        if tomorrow_idx >= 6:  # –ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ –ø–æ—Å–ª–µ —Å—É–±–±–æ—Ç—ã
            tomorrow_idx = 0
            week_change = True
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
        if week_change:
            week_info = self.get_week_info()
            if week_info:
                weeks = sorted(week_info.keys(), key=int)
                current_index = weeks.index(week_number)
                if current_index < len(weeks) - 1:
                    week_number = weeks[current_index + 1]
        
        await self.show_day_schedule_standalone(update, week_number, tomorrow_idx, "–∑–∞–≤—Ç—Ä–∞")

    @rate_limit(limit_seconds=2)
    async def monday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /monday - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"""
        await self.show_day_by_name(update, 0, "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")

    @rate_limit(limit_seconds=2)
    async def tuesday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /tuesday - –≤—Ç–æ—Ä–Ω–∏–∫"""
        await self.show_day_by_name(update, 1, "–≤—Ç–æ—Ä–Ω–∏–∫")

    @rate_limit(limit_seconds=2)
    async def wednesday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /wednesday - —Å—Ä–µ–¥–∞"""
        await self.show_day_by_name(update, 2, "—Å—Ä–µ–¥—É")

    @rate_limit(limit_seconds=2)
    async def thursday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /thursday - —á–µ—Ç–≤–µ—Ä–≥"""
        await self.show_day_by_name(update, 3, "—á–µ—Ç–≤–µ—Ä–≥")

    @rate_limit(limit_seconds=2)
    async def friday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /friday - –ø—è—Ç–Ω–∏—Ü–∞"""
        await self.show_day_by_name(update, 4, "–ø—è—Ç–Ω–∏—Ü—É")

    @rate_limit(limit_seconds=2)
    async def saturday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /saturday - —Å—É–±–±–æ—Ç–∞"""
        await self.show_day_by_name(update, 5, "—Å—É–±–±–æ—Ç—É")

    async def show_day_by_name(self, update: Update, day_idx: int, day_name: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–Ω—è"""
        if not self.is_data_loaded():
            await update.message.reply_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /refresh",
                parse_mode='HTML'
            )
            return
        
        # –î–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é
        week_number = self.get_current_academic_week()
        await self.show_day_schedule_standalone(update, week_number, day_idx, day_name)

    async def show_day_schedule_standalone(self, update: Update, week_number: str, day_idx: int, day_name: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        loading_message = await update.message.reply_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name}...")
        
        schedule = await asyncio.get_event_loop().run_in_executor(
            None, self.get_1krd6_schedule, week_number, day_idx
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–µ
        week_info = self.get_week_info()
        week_data = week_info.get(week_number, {})
        week_type = week_data.get('type', '')
        
        full_schedule = f"üìÖ <b>–ù–µ–¥–µ–ª—è {week_number}</b> ({week_type})\n{schedule}"
        
        keyboard = [
            [InlineKeyboardButton("üìÜ –î—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="quick_days")],
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –Ω–µ–¥–µ–ª—è", callback_data="select_week")],
            [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await loading_message.edit_text(full_schedule, reply_markup=reply_markup, parse_mode='HTML')

    async def show_week_selection_standalone(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        week_info = await asyncio.get_event_loop().run_in_executor(None, self.get_week_info)
        
        if not week_info:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª—è—Ö")
            return
        
        keyboard = []
        for week_num, info in sorted(week_info.items(), key=lambda x: int(x[0])):
            button_text = f"–ù–µ–¥–µ–ª—è {week_num} ({info['type']})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"week_{week_num}")])
        
        keyboard.append([InlineKeyboardButton("üìÜ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –¥–Ω—è–º", callback_data="quick_days")])
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_schedule")])
        keyboard.append([InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìÜ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:</b>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    @rate_limit(limit_seconds=2)
    async def debug(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /debug"""
        debug_info = await asyncio.get_event_loop().run_in_executor(None, self.debug_weeks_info)
        await update.message.reply_text(f"<pre>{debug_info}</pre>", parse_mode='HTML')

    @rate_limit(limit_seconds=2)
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
        query = update.callback_query
        
        try:
            # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            await query.answer()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")
        
        try:
            if query.data == "select_week":
                await self.show_week_selection(query, context)
            elif query.data == "refresh_schedule":
                await self.handle_refresh(query, context)
            elif query.data == "quick_days":
                await self.show_quick_days(query, context)
            elif query.data == "debug_weeks":
                await self.handle_debug(query, context)
            elif query.data == "back_to_menu":
                await self.show_main_menu(update, context)
            elif query.data.startswith("week_"):
                await self.handle_week_selection(query, context, query.data.replace("week_", ""))
            elif query.data.startswith("day_"):
                await self.handle_day_selection(query, context, query.data)
            elif query.data.startswith("all_days_"):
                await self.handle_all_days(query, context, query.data.replace("all_days_", ""))
            elif query.data.startswith("quick_day_"):
                await self.handle_quick_day_selection(query, context, query.data.replace("quick_day_", ""))
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é –¥–Ω–µ–π
            elif query.data == "quick_today":
                await self.handle_quick_today(query, context)
            elif query.data == "quick_tomorrow":
                await self.handle_quick_tomorrow(query, context)
            elif query.data == "quick_monday":
                await self.handle_quick_day(query, context, 0, "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
            elif query.data == "quick_tuesday":
                await self.handle_quick_day(query, context, 1, "–≤—Ç–æ—Ä–Ω–∏–∫")
            elif query.data == "quick_wednesday":
                await self.handle_quick_day(query, context, 2, "—Å—Ä–µ–¥—É")
            elif query.data == "quick_thursday":
                await self.handle_quick_day(query, context, 3, "—á–µ—Ç–≤–µ—Ä–≥")
            elif query.data == "quick_friday":
                await self.handle_quick_day(query, context, 4, "–ø—è—Ç–Ω–∏—Ü—É")
            elif query.data == "quick_saturday":
                await self.handle_quick_day(query, context, 5, "—Å—É–±–±–æ—Ç—É")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ callback: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except Exception as edit_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")

    async def handle_quick_today(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã '–°–µ–≥–æ–¥–Ω—è'"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        df = self.get_dataframe()
        if df is None or not self.is_data_loaded():
            await self.safe_edit_message(
                query, 
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /refresh –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
            )
            return
        
        week_number, day_idx = self.get_current_week_and_day()
        await self.show_quick_day_schedule(query, week_number, day_idx, "—Å–µ–≥–æ–¥–Ω—è")

    async def handle_quick_tomorrow(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã '–ó–∞–≤—Ç—Ä–∞'"""
        df = self.get_dataframe()
        if df is None or not self.is_data_loaded():
            await self.safe_edit_message(
                query, 
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /refresh –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
            )
            return
        
        week_number, current_day = self.get_current_week_and_day()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –¥–ª—è –∑–∞–≤—Ç—Ä–∞
        tomorrow_idx = current_day + 1
        week_change = False
        
        if tomorrow_idx >= 6:  # –ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ –ø–æ—Å–ª–µ —Å—É–±–±–æ—Ç—ã
            tomorrow_idx = 0
            week_change = True
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
        if week_change:
            week_info = self.get_week_info()
            if week_info:
                weeks = sorted(week_info.keys(), key=int)
                current_index = weeks.index(week_number)
                if current_index < len(weeks) - 1:
                    week_number = weeks[current_index + 1]
        
        await self.show_quick_day_schedule(query, week_number, tomorrow_idx, "–∑–∞–≤—Ç—Ä–∞")

    async def handle_quick_day(self, query, context: ContextTypes.DEFAULT_TYPE, day_idx: int, day_name: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        df = self.get_dataframe()
        if df is None or not self.is_data_loaded():
            await self.safe_edit_message(
                query, 
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /refresh –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
            )
            return
        
        # –î–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é
        week_number = self.get_current_academic_week()
        await self.show_quick_day_schedule(query, week_number, day_idx, day_name)

    async def show_quick_day_schedule(self, query, week_number: str, day_idx: int, day_name: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è –≤ –º–µ–Ω—é –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥"""
        await self.safe_edit_message(query, f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name}...")
        
        schedule = await asyncio.get_event_loop().run_in_executor(
            None, self.get_1krd6_schedule, week_number, day_idx
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–µ
        week_info = self.get_week_info()
        week_data = week_info.get(week_number, {})
        week_type = week_data.get('type', '')
        
        full_schedule = f"üìÖ <b>–ù–µ–¥–µ–ª—è {week_number}</b> ({week_type})\n{schedule}"
        
        keyboard = [
            [InlineKeyboardButton("üìÜ –î—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="quick_days")],
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –Ω–µ–¥–µ–ª—è", callback_data="select_week")],
            [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_message(query, full_schedule, reply_markup)

    async def handle_refresh(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        await self.safe_edit_message(query, "üîÑ –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
        success = await asyncio.get_event_loop().run_in_executor(None, self.download_schedule_from_website)
        
        if success:
            await self.safe_edit_message(query, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await asyncio.sleep(1)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º query –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.show_main_menu_from_query(query, context)
        else:
            await self.safe_edit_message(query, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")

    async def show_main_menu_from_query(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ callback query"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –Ω–µ–¥–µ–ª—é", callback_data="select_week")],
            [InlineKeyboardButton("üìÜ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –¥–Ω—è–º", callback_data="quick_days")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="refresh_schedule")],
            [InlineKeyboardButton("üêõ –û—Ç–ª–∞–¥–∫–∞", callback_data="debug_weeks")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        status = "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ" if self.data_loaded else "‚ö†Ô∏è –°—Ç–∞—Ä–æ–µ"
        
        text = (
            f"üëã <b>–ë–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è 1-–ö–†–î-6</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö:</b> {status}\n\n"
            "üöÄ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /refresh - –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ /week - –í—ã–±—Ä–∞—Ç—å –Ω–µ–¥–µ–ª—é\n"
            "‚Ä¢ /today - –°–µ–≥–æ–¥–Ω—è\n‚Ä¢ /tomorrow - –ó–∞–≤—Ç—Ä–∞\n"
            "‚Ä¢ /monday - –ü–Ω\n‚Ä¢ /tuesday - –í—Ç\n‚Ä¢ /wednesday - –°—Ä\n"
            "‚Ä¢ /thursday - –ß—Ç\n‚Ä¢ /friday - –ü—Ç\n‚Ä¢ /saturday - –°–±\n\n"
            "üëá <i>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:</i>"
        )
        
        await self.safe_edit_message(query, text, reply_markup)

    async def show_quick_days(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üìÜ –°–µ–≥–æ–¥–Ω—è", callback_data="quick_today"),
                InlineKeyboardButton("üìÜ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow")
            ],
            [
                InlineKeyboardButton("üìÜ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="quick_monday"),
                InlineKeyboardButton("üìÜ –í—Ç–æ—Ä–Ω–∏–∫", callback_data="quick_tuesday")
            ],
            [
                InlineKeyboardButton("üìÜ –°—Ä–µ–¥–∞", callback_data="quick_wednesday"),
                InlineKeyboardButton("üìÜ –ß–µ—Ç–≤–µ—Ä–≥", callback_data="quick_thursday")
            ],
            [
                InlineKeyboardButton("üìÜ –ü—è—Ç–Ω–∏—Ü–∞", callback_data="quick_friday"),
                InlineKeyboardButton("üìÜ –°—É–±–±–æ—Ç–∞", callback_data="quick_saturday")
            ],
            [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –Ω–µ–¥–µ–ª—é", callback_data="select_week")],
            [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_message(
            query,
            "üìÜ <b>–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –¥–Ω—è–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup
        )

    async def handle_quick_day_selection(self, query, context: ContextTypes.DEFAULT_TYPE, day_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
        df = self.get_dataframe()
        if df is None or not self.is_data_loaded():
            await self.safe_edit_message(
                query, 
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /refresh –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
            )
            return
        
        week_number, current_day = self.get_current_week_and_day()
        
        if day_data == "today":
            day_idx = current_day
            day_name = "—Å–µ–≥–æ–¥–Ω—è"
        elif day_data == "tomorrow":
            day_idx = (current_day + 1) % 6
            day_name = "–∑–∞–≤—Ç—Ä–∞"
        else:
            day_idx = int(day_data)
            days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É"]
            day_name = days[day_idx]
        
        await self.safe_edit_message(query, f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name}...")
        
        schedule = await asyncio.get_event_loop().run_in_executor(
            None, self.get_1krd6_schedule, week_number, day_idx
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–µ
        week_info = self.get_week_info()
        week_data = week_info.get(week_number, {})
        week_type = week_data.get('type', '')
        
        full_schedule = f"üìÖ <b>–ù–µ–¥–µ–ª—è {week_number}</b> ({week_type})\n{schedule}"
        
        keyboard = [
            [InlineKeyboardButton("üìÜ –î—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="quick_days")],
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –Ω–µ–¥–µ–ª—è", callback_data="select_week")],
            [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_message(query, full_schedule, reply_markup)

    async def show_week_selection(self, query=None, context: ContextTypes.DEFAULT_TYPE = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏"""
        week_info = await asyncio.get_event_loop().run_in_executor(None, self.get_week_info)
        
        if not week_info:
            if query:
                await self.safe_edit_message(query, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª—è—Ö")
            return
        
        keyboard = []
        for week_num, info in sorted(week_info.items(), key=lambda x: int(x[0])):
            button_text = f"–ù–µ–¥–µ–ª—è {week_num} ({info['type']})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"week_{week_num}")])
        
        keyboard.append([InlineKeyboardButton("üìÜ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –¥–Ω—è–º", callback_data="quick_days")])
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_schedule")])
        keyboard.append([InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query:
            await self.safe_edit_message(
                query,
                "üìÜ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:</b>",
                reply_markup
            )

    async def handle_week_selection(self, query, context: ContextTypes.DEFAULT_TYPE, week_number):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏"""
        context.user_data['selected_week'] = week_number
        
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
        
        keyboard = []
        for day_idx, day_name in enumerate(days):
            keyboard.append([InlineKeyboardButton(day_name, callback_data=f"day_{week_number}_{day_idx}")])
        
        keyboard.append([InlineKeyboardButton("üìÖ –í—Å—è –Ω–µ–¥–µ–ª—è", callback_data=f"all_days_{week_number}")])
        keyboard.append([InlineKeyboardButton("üìÜ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –¥–Ω—è–º", callback_data="quick_days")])
        keyboard.append([InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –Ω–µ–¥–µ–ª—è", callback_data="select_week")])
        keyboard.append([InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        week_info = self.get_week_info()
        week_data = week_info.get(week_number, {})
        
        await self.safe_edit_message(
            query,
            f"üìÜ <b>–ù–µ–¥–µ–ª—è {week_number}</b> ({week_data.get('type', '')})\n"
            f"üìÖ {week_data.get('description', '')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
            reply_markup
        )

    async def handle_day_selection(self, query, context: ContextTypes.DEFAULT_TYPE, day_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
        week_number, day_idx = day_data.replace("day_", "").split('_')
        day_idx = int(day_idx)
        
        await self.safe_edit_message(query, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
        
        schedule = await asyncio.get_event_loop().run_in_executor(
            None, self.get_1krd6_schedule, week_number, day_idx
        )
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –î—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data=f"week_{week_number}")],
            [InlineKeyboardButton("üìÜ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –¥–Ω—è–º", callback_data="quick_days")],
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –Ω–µ–¥–µ–ª—è", callback_data="select_week")],
            [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_message(query, schedule, reply_markup)

    async def handle_all_days(self, query, context: ContextTypes.DEFAULT_TYPE, week_number):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ–π –Ω–µ–¥–µ–ª–∏"""
        await self.safe_edit_message(query, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é...")
        
        schedule = await asyncio.get_event_loop().run_in_executor(
            None, self.get_full_week_schedule, week_number
        )
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å", callback_data=f"week_{week_number}")],
            [InlineKeyboardButton("üìÜ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –¥–Ω—è–º", callback_data="quick_days")],
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –Ω–µ–¥–µ–ª—è", callback_data="select_week")],
            [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.safe_edit_message(query, schedule, reply_markup)

    async def handle_debug(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ª–∞–¥–∫–∏"""
        debug_info = await asyncio.get_event_loop().run_in_executor(None, self.debug_weeks_info)
        
        if len(debug_info) > 4000:
            parts = [debug_info[i:i+4000] for i in range(0, len(debug_info), 4000)]
            for i, part in enumerate(parts):
                await query.message.reply_text(f"<pre>–ß–∞—Å—Ç—å {i+1}:\n{part}</pre>", parse_mode='HTML')
        else:
            await query.message.reply_text(f"<pre>{debug_info}</pre>", parse_mode='HTML')

    def get_1krd6_schedule(self, week_number="1", day_filter=None):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            if day_filter is None:
                return self.get_full_week_schedule(week_number)
            return self._get_day_schedule(week_number, day_filter, show_day_header=True)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def get_full_week_schedule(self, week_number="1"):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        try:
            df = self.get_dataframe()
            if df is None:
                return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
            
            week_info = self.get_week_info()
            if not week_info or week_number not in week_info:
                return "‚ùå –ù–µ–¥–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            week_data = week_info[week_number]
            schedule_text = f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 1-–ö–†–î-6</b>\n"
            schedule_text += f"üî¢ –ù–µ–¥–µ–ª—è: {week_number} ({week_data['type']})\n"
            schedule_text += f"üìÜ {week_data['description']}\n\n"
            
            days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
            
            for day_idx, day_col in enumerate(week_data['columns']):
                if day_idx >= len(days):
                    break
                day_schedule = self._get_day_schedule(week_number, day_idx, show_day_header=True)
                schedule_text += day_schedule + "\n"
            
            return schedule_text
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def _get_day_schedule(self, week_number, day_idx, show_day_header=True):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–Ω—è —Å –¥–∞—Ç–æ–π"""
        try:
            df = self.get_dataframe()
            if df is None:
                return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
            
            week_info = self.get_week_info()
            if not week_info or week_number not in week_info:
                return "‚ùå –ù–µ–¥–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            week_data = week_info[week_number]
            day_col = week_data['columns'][day_idx]
            
            days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–Ω—è –¥–ª—è –í–°–ï–• –¥–Ω–µ–π
            day_date = self.get_day_date(week_number, day_idx)
            date_suffix = f" ({day_date})" if day_date else ""
            
            day_schedule = f"<b>{days[day_idx]}{date_suffix}</b>\n" if show_day_header else ""
            has_classes = False
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏
            time_cells = []
            for row in range(89, 131):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                cell_value = df.iloc[row, day_col]
                if pd.notna(cell_value):
                    cell_str = str(cell_value).strip()
                    if self._is_time_cell(cell_str):
                        time_value = self.extract_time_value(cell_value)
                        time_cells.append({'row': row, 'time': cell_str, 'time_value': time_value})
            
            time_cells.sort(key=lambda x: x['time_value'])
            pair_numbers = self._get_real_pair_numbers([tc['time_value'] for tc in time_cells])
            
            for i, time_cell in enumerate(time_cells):
                if i >= len(pair_numbers):
                    break
                    
                has_classes = True
                pair_num = pair_numbers[i]
                day_schedule += f"<b>–ü–∞—Ä–∞ {pair_num}:</b>\nüïê {time_cell['time']}\n"
                
                row = time_cell['row']
                # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                for offset, label in enumerate(['üìö', 'üë®‚Äçüè´', 'üè´', 'üìö', 'üë®‚Äçüè´', 'üè´'], 1):
                    if row + offset <= 130:
                        data_value = df.iloc[row + offset, day_col]
                        if pd.notna(data_value) and str(data_value).strip() not in ['', '(–ø—É—Å—Ç–æ)', 'nan']:
                            day_schedule += f"{label} {str(data_value).strip()}\n"
                
                day_schedule += "\n"
            
            if not has_classes:
                day_schedule += "‚ùå –ü–∞—Ä –Ω–µ—Ç\n\n"
            
            return day_schedule
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def _is_time_cell(self, cell_str):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        if not cell_str or cell_str in ['', '(–ø—É—Å—Ç–æ)', 'nan']:
            return False
        return bool(re.search(r'\d{1,2}:\d{2}', cell_str))

    def extract_time_value(self, time_str):
        """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        if pd.isna(time_str):
            return 0
        time_match = re.search(r'(\d{1,2}):(\d{2})', str(time_str).strip())
        if time_match:
            hours = int(time_match.group(1))
            minutes = int(time_match.group(2))
            return hours * 60 + minutes
        return 0

    def _get_real_pair_numbers(self, time_values):
        """–ë—ã—Å—Ç—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –ø–∞—Ä"""
        if not time_values:
            return []
        pair_times = {1: 510, 2: 620, 3: 720, 4: 835, 5: 940, 6: 1045}
        return [min(pair_times.items(), key=lambda x: abs(x[1] - time_value))[0] for time_value in time_values]

    def debug_weeks_info(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        try:
            df = self.get_dataframe()
            if df is None:
                return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
            
            debug_text = "üîç –û–¢–õ–ê–î–ö–ê –ù–ï–î–ï–õ–¨:\n\n"
            debug_text += f"üìä –°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}, –°—Ç—Ä–æ–∫: {len(df)}\n\n"
            
            # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–µ–ª—å
            week_cells = []
            for col in range(min(50, len(df.columns))):
                cell_value = df.iloc[3, col]
                if pd.notna(cell_value) and '–Ω–µ–¥–µ–ª—è' in str(cell_value).lower():
                    week_cells.append((col, str(cell_value)))
            
            debug_text += f"üìã –ù–∞–π–¥–µ–Ω–æ –Ω–µ–¥–µ–ª—å: {len(week_cells)}\n"
            
            week_info = self.get_week_info()
            for week_num, info in sorted(week_info.items(), key=lambda x: int(x[0])):
                debug_text += f"\nüìÖ –ù–µ–¥–µ–ª—è {week_num}: {info['description']}\n"
                debug_text += f"   –°—Ç–æ–ª–±—Ü—ã: {info['columns']}\n"
            
            return debug_text
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {str(e)}"

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("menu", self.menu))
        application.add_handler(CommandHandler("refresh", self.refresh))
        application.add_handler(CommandHandler("week", self.week))
        application.add_handler(CommandHandler("today", self.today))
        application.add_handler(CommandHandler("tomorrow", self.tomorrow))
        application.add_handler(CommandHandler("monday", self.monday))
        application.add_handler(CommandHandler("tuesday", self.tuesday))
        application.add_handler(CommandHandler("wednesday", self.wednesday))
        application.add_handler(CommandHandler("thursday", self.thursday))
        application.add_handler(CommandHandler("friday", self.friday))
        application.add_handler(CommandHandler("saturday", self.saturday))
        application.add_handler(CommandHandler("debug", self.debug))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        application.post_init = self.setup_commands
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        logger.info("üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /menu")
        
        try:
            application.run_polling(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == '__main__':
    bot = ScheduleBot()
    bot.run()
